export name = 'nvim-treesitter/nvim-treesitter'
export lazy = false

export config = ->
  import 'nvim-treesitter.configs' as :setup
  setup
    ensure_installed:
      * 'awk'
      * 'c'
      * 'css'
      * 'diff'
      * 'dot'
      * 'git_config'
      * 'git_rebase'
      * 'gitattributes'
      * 'gitcommit'
      * 'gitignore'
      * 'go'
      * 'gomod'
      * 'gosum'
      * 'html'
      * 'json'
      * 'latex'
      * 'lua'
      * 'make'
      * 'markdown'
      * 'markdown_inline'
      * 'rust'
      * 'starlark'
      * 'toml'
      * 'yaml'
    sync_install: false
    auto_install: true
    highlight:
      enable: true

  import get_parser, get_node_text from vim.treesitter
  import parse from vim.treesitter.query
  import nvim_get_current_buf, nvim_buf_set_lines, nvim_buf_get_lines, nvim_create_user_command from vim.api
  {
    nvim_create_autocmd: autocmd,
    nvim_create_augroup: autogroup,
  } = vim.api

  embedded_starlark = parse 'go', [[
    (call_expression
      function: (selector_expression
        operand: (identifier) @_id (#eq? @_id "st")
        field: (field_identifier) @_field (#eq? @_field "RunString")
      )
      arguments: (argument_list
        (raw_string_literal) @starlark
        (#offset! @starlark 1 0 -1 0)
      )
    )
  ]]

  run_formatter = (lines, expected_indent) ->
    indent = if #lines > 2
      lines[2]\match '^([ \t]*)'
    else
      ''
    for line in *lines[2,#lines-1]
      if (line\match '[^ \t]') and not line\match "^#{indent}"
        return nil, "inconsistent indents: '#{indent}', '#{line}'"
    if #lines <= 1
      print indent, #indent, lines[1], (lines[1] or '')\sub #indent + 1
    lines = [ line\sub #indent + 1 for line in *lines ]

    -- Run the formatter here!

    vim.print lines
    formatted = with {}
      [] = lines[1]
      for line in *lines[2,]
        unless line\match '^[ \t]*$'
          [] = "\t#{line}"
        else
          [] = ""
    formatted, nil

  get_root = (bufnr) ->
    parser = get_parser bufnr, "go", {}
    tree = parser\parse![1]
    tree\root!

  format_starlark = (bufnr=nvim_get_current_buf!) ->
    if vim.bo[bufnr].filetype != 'go'
      vim.notify 'can only be used inside go'
      return

    root = get_root bufnr
    changes = with {}
      for id, node in embedded_starlark\iter_captures root, bufnr, 0, -1
        name = embedded_starlark.captures[id]
        if name == 'starlark'
          start_row, start_col, end_row, end_col = node\range!
          indentation = string.rep '\t', start_col % 4 - 1
          raw = do
            raw = get_node_text node, bufnr
            raw = raw\sub 2, #raw - 1
            [ line for line in raw\gmatch '([^\n]*)\n' ]

          formatted, err = run_formatter raw, indentation
          if err
            error err
          if #formatted == 0
            return formatted, nil
          for i, line in pairs formatted
            formatted[i] = indentation .. line
          formatted[1] = "#{indentation}st.RunString(`#{formatted[1]}"

          print #formatted, #raw
          vim.print formatted, raw

          assert(#formatted != 1 or #formatted == #raw, 'single-line reformatted to multiple, help!')

          if #formatted == 1
            assert(start_row == end_row)
            { src } = nvim_buf_get_lines bufnr, change.start_row, change.end_row, false

            formatted[1] = "<#{src\sub 1, start_col}|#{formatted[1]}|#{src\sub end_col}>"
            error formatted[1]

          [] =
            :start_row
            :start_col
            :end_row
            :end_col
            :formatted

    -- if #changes <= 2
    --   assert(change.start_row == change.end_row)
    --   { raw } = nvim_buf_get_lines bufnr, change.start_row, change.end_row, false
    -- Apply changes backwards to avoid collisions
    for change in *changes[#changes,1,-1]
      nvim_buf_set_lines bufnr, change.start_row, change.end_row, false, change.formatted

  nvim_create_user_command 'FormatEmbeddedStarlark', (-> format_starlark!), {}

  with group = autogroup 'go-format-starlark', clear: true
    autocmd 'BufWritePre',
      :group
      pattern: '*.go'
      callback: -> format_starlark!
